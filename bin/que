#!/usr/bin/env ruby

require 'optparse'
require 'ostruct'
require 'logger'

options = OpenStruct.new
options.worker_count = 4
options.log_level = 'info'
options.wake_interval = 0.1

OptionParser.new do |opts|
  opts.banner = 'usage: que [options] file/to/require ...'

  opts.on('-w', '--worker-count [COUNT]', Integer, "Set number of workers in process (default: 4)") do |worker_count|
    options.worker_count = worker_count
  end

  opts.on('-i', '--wake-interval [INTERVAL]', Float, "Set maximum interval between polls of the job queue (in seconds) (default: 0.1)") do |wake_interval|
    options.wake_interval = wake_interval
  end

  opts.on('-l', '--log-level [LEVEL]', String, "Set level of Que's logger (debug, info, warn, error, fatal) (default: info)") do |log_level|
    options.log_level = log_level
  end

  opts.on('-q', '--queue-name [NAME]', String, "Set the name of the queue to work jobs from (default: the default queue)") do |queue_name|
    options.queue_name = queue_name
  end

  opts.on('-v', '--version', "Show Que version") do
    $stdout.puts "Que version #{Version}"
    exit 0
  end

  opts.on('-h', '--help', "Show help text") do
    $stdout.puts opts
    exit 0
  end
end.parse!(ARGV)

if ARGV.length.zero?
  $stdout.puts <<-OUTPUT
You didn't include any Ruby files to require!
Que needs to be able to load your application before it can process jobs.
(Hint: If you're using Rails, try `que config/environment.rb`)
(Or use `que -h` for a list of options)
OUTPUT
exit 1
end

ARGV.each do |file|
  begin
    # Need to add '.' to load path for relative requires
    $LOAD_PATH << '.'
    require file
  rescue LoadError
    $stdout.puts "Could not load file '#{file}'"
  ensure
    # Clean up load path
    $LOAD_PATH.pop
  end
end

Que.logger ||= Logger.new(STDOUT)

begin
  Que.logger.level = Logger.const_get(options.log_level.upcase)
rescue NameError
  $stdout.puts "Bad logging level: #{options.log_level}"
  exit 1
end

Que.queue_name    = options.queue_name
Que.worker_count  = options.worker_count
Que.wake_interval = options.wake_interval
Que.mode          = :async

stop = false
%w(INT TERM).each { |signal| trap(signal) { stop = true } }

at_exit do
  $stdout.puts
  $stdout.puts "Finishing Que's current jobs before exiting..."
  Que.worker_count = 0
  Que.mode = :off
  $stdout.puts "Que's jobs finished, exiting..."
end

loop do
  sleep 0.01
  break if stop
end
