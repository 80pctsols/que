default_environment: &default_environment
  GEMFILE_VERSIONS: "current old older oldest"
  PG_VERSIONS: "9.4 9.5 9.6"
  PG_PORTS: "5432 5433 5434"

defaults: &defaults
  working_directory: ~/que
  docker:
    - image: chanks/que-circleci:0.0.2
  steps:
    - checkout

    - run:
        name: Start Postgres
        background: true
        command: |
          # Fix SSL certificate error. Not sure why this is necessary.
          # See https://github.com/nimiq/docker-postgresql93/issues/2
          mkdir /etc/ssl/private-copy
          mv /etc/ssl/private/* /etc/ssl/private-copy/
          rm -r /etc/ssl/private
          mv /etc/ssl/private-copy /etc/ssl/private
          chmod -R 0700 /etc/ssl/private
          chown -R postgres /etc/ssl/private

          # Start up versions in parallel.
          for PG_VERSION in $PG_VERSIONS
          do
            (
              # Set up Postgres connection rules.
              echo "host all all 127.0.0.1/32 trust" > \
                /etc/postgresql/$PG_VERSION/main/pg_hba.conf
              echo "local all all trust" >> \
                /etc/postgresql/$PG_VERSION/main/pg_hba.conf
              service postgresql start $PG_VERSION
            ) &
          done

          # Once they're all started up, use postgres_ready to signal that to a
          # later command. Do that so we can run this command safely in the
          # background.
          wait
          touch postgres_ready

    # Use all our Gemfiles as a Bundler cache key. The CircleCI docs say we can
    # use {{.Environment.RUBY_VERSION}} in the cache key, which would be
    # cleaner, but all I get is `<no value>` :/ So, be a bit hackier.
    - run:
        name: Calculate Bundler Cache Key
        command: |
          md5sum spec/gemfiles/Gemfile.* > bundler_checksum
          echo $RUBY_VERSION >> bundler_checksum

    - restore_cache:
        key: bundler-cache-{{checksum "bundler_checksum"}}

    - run:
        name: Install Gems
        command: |
          # If our vendored gems are present, don't bother running bundle
          # install, it'll just take up time.
          if [ ! -d spec/gemfiles/vendor ]; then
            for GEMFILE_VERSION in $GEMFILE_VERSIONS
            do
              rvm $RUBY_VERSION do \
                bundle install \
                  --gemfile spec/gemfiles/Gemfile.$GEMFILE_VERSION \
                  --path vendor
            done
          fi

    - save_cache:
        key: bundler-cache-{{checksum "bundler_checksum"}}
        paths: spec/gemfiles

    - run:
        name: Run Tests
        command: |
          # Wait until we know Postgres is ready.
          while [ ! -f postgres_ready ]; do sleep 0.1; done

          # pids=()

          # Run tests against all Postgres versions simultaneously, since they
          # can't conflict, but save their outputs to files.
          for PORT in $PG_PORTS
          do
            (
              for GEMFILE_VERSION in $GEMFILE_VERSIONS
              do
                DATABASE_URL="postgres://postgres:@localhost:$PORT/template1" \
                BUNDLE_GEMFILE="spec/gemfiles/Gemfile.$GEMFILE_VERSION" \
                rvm $RUBY_VERSION do bundle exec rake >> $PORT.output
              done
            ) # & pids+=($!)
          done

          # # Let tests finish.
          # for pid in $pids
          # do
          #   wait $pid
          # done

          # Print results in bulk so we don't get confusing, interleaved output.
          for PORT in $PG_PORTS; do cat $PORT.output; done

version: 2
jobs:
  ruby_2_2:
    <<: *defaults
    environment:
      <<: *default_environment
      RUBY_VERSION: 2.2

  ruby_2_3:
    <<: *defaults
    environment:
      <<: *default_environment
      RUBY_VERSION: 2.3

  ruby_2_4:
    <<: *defaults
    environment:
      <<: *default_environment
      RUBY_VERSION: 2.4

workflows:
  version: 2
  build_all_rubies:
    jobs:
      - ruby_2_2
      - ruby_2_3
      - ruby_2_4
